logging:
  level.root: WARN
  level.no: ${LOG_LEVEL:INFO}
  level.org.springframework: WARN
  level.org.springframework.web: WARN
  level.org.apache.avro: ERROR
  level.org.apache.kafka: ERROR
server:
  port: 8080
management:
  endpoints:
    web:
      base-path: /
      path-mapping:
        info: ping
        health: ready
      exposure:
        include: health, info, prometheus
  metrics:
    tags:
      application: fdk-statistics-service
spring:
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  kafka:
    bootstrap-servers:
      - ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    properties:
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY:http://localhost:8081}
      specific.avro.reader: true
      auto.register.schemas: false
      use.latest.version: true
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
      key.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
    consumer:
      auto-offset-reset: earliest
      enable-auto-commit: false
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      compression-type: snappy
    listener:
      ack-mode: manual_immediate
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    generate-ddl: false
    hibernate.ddl-auto: none
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 60000
        automaticTransitionFromOpenToHalfOpenEnabled: true
    instances:
      rdf-parse.baseConfig: default
      remove.baseConfig: default
application:
  prop: 1
  cors:
    originPatterns: "${CORS_ORIGIN_PATTERNS}"

---
spring:
  config.activate.on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/statistics
    username: postgres
    password: S3cret
application:
  scope: test.scope
  cors:
    originPatterns: "*"
logging.level.no: DEBUG

---
spring:
  config.activate.on-profile: test
application:
  scope: test.scope
  cors:
    originPatterns: "*"
